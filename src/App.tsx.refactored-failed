import React, { useState, useEffect } from 'react';
import { invoke } from '@tauri-apps/api/tauri';
import { listen } from '@tauri-apps/api/event';
import { unregisterAll } from '@tauri-apps/api/globalShortcut';
import { open } from '@tauri-apps/api/dialog';
import './App.css';
import './styles/micro-interactions.css';
import logger from './utils/logger';

// Store and types
import { useStore } from './store/appStore';
import type { TranscriptionEntry } from './store/appStore';

// Components
import FloatingDialog from './components/FloatingDialog';
import Navigation from './components/Navigation';
import PageRouter from './components/PageRouter';
import Toggle from './components/ui/Toggle';

// Data
import { transcriptionModels } from './data/models';

// Utils
import { getModelInfo } from './utils/modelHelpers';
import { initializeShortcuts, setupEventListeners } from './utils/appInitializers';

function App() {
  // Local state
  const [isFirstLaunch, setIsFirstLaunch] = useState(false);
  const [showSubscription, setShowSubscription] = useState(false);
  const [showPermissionAlert, setShowPermissionAlert] = useState(false);
  const [missingPermissions, setMissingPermissions] = useState<Array<{name: string}>>([]);
  const [currentApp, setCurrentApp] = useState<{ name: string; icon: string } | null>(null);

  // Store state
  const {
    isRecording,
    transcriptionText,
    selectedModel,
    showFloatingDialog,
    aiProcessingActive,
    setRecording,
    setTranscription,
    addTranscriptionEntry,
    setShowFloatingDialog,
    setAiProcessingActive
  } = useStore();

  // 初始化应用
  useEffect(() => {
    const initializeApp = async () => {
      try {
        // 检查首次启动
        const isFirstTime = await checkFirstLaunch();
        setIsFirstLaunch(isFirstTime);

        if (!isFirstTime) {
          // 初始化核心功能
          await initializeCore();
          await initializeShortcuts();
          await setupEventListeners();
          
          // 检查权限
          await checkPermissions();
        }

        logger.info('应用初始化完成');
      } catch (error) {
        logger.error('应用初始化失败', error);
      }
    };

    initializeApp();

    // 清理函数
    return () => {
      unregisterAll().catch(error => {
        logger.error('清理快捷键失败', error);
      });
    };
  }, []);

  // 检查首次启动
  const checkFirstLaunch = async (): Promise<boolean> => {
    try {
      const hasLaunched = localStorage.getItem('spokenly_has_launched');
      return !hasLaunched;
    } catch {
      return true;
    }
  };

  // 初始化核心功能
  const initializeCore = async () => {
    try {
      // 获取支持的文件格式
      const formats = await invoke('get_supported_formats');
      logger.info('支持的文件格式', formats);

      // 初始化数据库
      await invoke('init_database');
      
      // 加载历史记录
      const history = await invoke('get_transcription_history');
      if (Array.isArray(history)) {
        // setTranscriptionHistory(history);
      }
    } catch (error) {
      logger.error('核心功能初始化失败', error);
    }
  };

  // 检查权限
  const checkPermissions = async () => {
    try {
      const permissions = await invoke('check_permissions') as Array<{name: string, granted: boolean}>;
      const missing = permissions.filter((p: any) => !p.granted);
      setMissingPermissions(missing);
      setShowPermissionAlert(missing.length > 0);
    } catch (error) {
      logger.error('权限检查失败', error);
    }
  };

  // 开始录音
  const startRecording = async () => {
    try {
      setRecording(true);
      logger.audio('开始录音');
      
      const result = await invoke('start_recording');
      logger.audio('录音已开始', result);
      
      return result;
    } catch (error) {
      logger.error('开始录音失败', error);
      setRecording(false);
      throw error;
    }
  };

  // 停止录音
  const stopRecording = async () => {
    try {
      logger.audio('停止录音');
      
      const result = await invoke('stop_recording') as any;
      setRecording(false);
      
      if (result && result.text) {
        setTranscription(result.text);
        
        // 添加到历史记录
        const entry: TranscriptionEntry = {
          id: Date.now().toString(),
          timestamp: new Date(),
          text: result.text,
          duration: result.duration,
          confidence: result.confidence,
          model: selectedModel
        };
        addTranscriptionEntry(entry);
        
        logger.transcription('录音转录完成', entry);
      }
      
      return result;
    } catch (error) {
      logger.error('停止录音失败', error);
      setRecording(false);
      throw error;
    }
  };

  // 处理文件上传
  const handleFileUpload = async () => {
    try {
      const selected = await open({
        multiple: false,
        filters: [
          { name: 'Audio', extensions: ['mp3', 'wav', 'm4a', 'aac', 'flac'] },
          { name: 'Video', extensions: ['mp4', 'mkv', 'avi', 'mov'] }
        ]
      });

      if (selected && typeof selected === 'string') {
        logger.info('选择的文件', selected);
        
        const result = await invoke('transcribe_file', { filePath: selected });
        logger.info('转录结果', result);
        
        return result;
      }
    } catch (error) {
      logger.error('文件上传失败', error);
      throw error;
    }
  };

  // 导出历史记录
  const handleExport = async () => {
    try {
      const exportPath = await invoke('export_history');
      logger.info('导出成功', exportPath);
      return exportPath;
    } catch (error) {
      logger.error('导出失败', error);
      throw error;
    }
  };

  // AI增强处理
  const handleAIEnhancement = async (text: string) => {
    try {
      setAiProcessingActive(true);
      const enhancedText = await invoke('enhance_text_with_ai', { text });
      logger.ai('AI增强文本已处理完成', enhancedText);
      setAiProcessingActive(false);
      return enhancedText;
    } catch (error) {
      logger.error('AI增强处理失败', error);
      setAiProcessingActive(false);
      throw error;
    }
  };

  // 事件处理器
  const handleAppSelect = (app: { name: string; icon: string }) => {
    setCurrentApp(app);
    logger.debug('选择的应用', app);
  };

  const handleHistoryUpdate = (settings: any) => {
    logger.debug('更新历史记录设置', settings);
  };

  const handlePermissionUpdate = () => {
    setShowPermissionAlert(false);
    checkPermissions();
    logger.info('权限已配置');
  };

  const handleFirstLaunchComplete = () => {
    localStorage.setItem('spokenly_has_launched', 'true');
    setIsFirstLaunch(false);
    logger.info('首次设置完成');
  };

  return (
    <div className="app">
      {/* 浮动对话框 */}
      {showFloatingDialog && (
        <FloatingDialog
          isVisible={showFloatingDialog}
          isRecording={isRecording}
          transcriptionText={transcriptionText}
          onStartRecording={startRecording}
          onStopRecording={stopRecording}
          onClose={() => setShowFloatingDialog(false)}
        />
      )}

      {/* 主界面 */}
      <div className="main-container">
        {/* 侧边栏导航 */}
        <aside className="sidebar">
          <div className="app-header">
            <h1>Recording King</h1>
            <p>智能语音转录助手</p>
          </div>
          
          <Navigation className="sidebar-nav" />
          
          {/* 状态指示器 */}
          <div className="status-indicators">
            <div className={`recording-status ${isRecording ? 'active' : ''}`}>
              {isRecording ? '录音中...' : '待机中'}
            </div>
            {aiProcessingActive && (
              <div className="ai-status">AI处理中...</div>
            )}
          </div>
        </aside>

        {/* 主内容区域 */}
        <main className="main-content">
          <PageRouter
            currentApp={currentApp}
            onAppSelect={handleAppSelect}
            onHistoryUpdate={handleHistoryUpdate}
            onPermissionUpdate={handlePermissionUpdate}
            onFirstLaunchComplete={handleFirstLaunchComplete}
            isFirstLaunch={isFirstLaunch}
            showSubscription={showSubscription}
            missingPermissions={missingPermissions}
            showPermissionAlert={showPermissionAlert}
          />
        </main>
      </div>
    </div>
  );
}

export default App;